{"version":3,"sources":["components/apps/GitHubProjects.js"],"names":["useStyles","makeStyles","theme","root","position","top","left","right","bottom","noPadding","padding","header","background","paddingLeft","spacing","paddingRight","sorting","marginRight","list","overflow","itemText","playIconButton","languageChip","itemFooter","marginTop","marginBottom","connect","state","dispatch","openTask","payload","classes","taskContext","useContext","TaskContext","componentProps","handleUpdateTaskComponent","repos","runnableOnly","useEffect","fetch","Request","apiUrl","then","response","json","catch","error","filteredRepos","useMemo","_repos","filter","repo","has_pages","sort","r1","r2","name","pushed_at","className","dense","control","size","exclusive","value","onChange","event","newSorting","label","labelPlacement","checked","target","map","index","Fragment","container","direction","justifyContent","alignItems","item","primary","secondary","description","language","variant","Date","toLocaleDateString","title","onClick","component","appname","url","icon","color","html_url","window","open"],"mappings":"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","file":"static/js/6.11870225.chunk.js","sourcesContent":["import React, { useContext, useEffect, useMemo } from \"react\";\nimport {\n  Chip,\n  Divider,\n  FormControlLabel,\n  Grid,\n  IconButton,\n  List,\n  ListItem,\n  ListItemSecondaryAction,\n  ListItemText,\n  ListSubheader,\n  makeStyles,\n  Paper,\n  Switch,\n  Tooltip,\n  Typography\n} from \"@material-ui/core\";\nimport TaskContext from \"../../contexts/TaskContext\";\nimport { connect } from \"react-redux\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { openTask } from \"../../redux/task/task.reducer\";\nimport { ToggleButton, ToggleButtonGroup } from \"@material-ui/lab\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0\n  },\n  noPadding: { padding: 0 },\n  header: {\n    background: \"white\",\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(2)\n  },\n  sorting: { marginRight: theme.spacing(2) },\n  list: {\n    position: \"absolute\",\n    padding: 0,\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    overflow: \"scroll\"\n  },\n  itemText: {\n    paddingRight: 60\n  },\n  playIconButton: {\n    marginRight: 10\n  },\n  languageChip: {\n    marginRight: 3\n  },\n  itemFooter: {\n    marginTop: 3,\n    marginBottom: 3\n  }\n}));\nfunction GitHubProjects({\n  //Redux actions\n  openTask\n}) {\n  const classes = useStyles();\n  const taskContext = useContext(TaskContext);\n  const { componentProps, handleUpdateTaskComponent } = taskContext;\n  const { repos, runnableOnly, sorting } = componentProps;\n\n  useEffect(() => {\n    fetch(new Request(componentProps.apiUrl))\n      .then((response) => response.json())\n      .then((repos) => {\n        handleUpdateTaskComponent({ repos });\n      })\n      .catch((error) => {});\n  }, [componentProps.apiUrl, handleUpdateTaskComponent]);\n\n  const filteredRepos = useMemo(() => {\n    let _repos = [...(repos || [])];\n    if (runnableOnly) {\n      _repos = _repos.filter((repo) => repo.has_pages);\n    }\n\n    switch (sorting) {\n      case \"name\":\n        _repos.sort((r1, r2) => {\n          if (r1.name < r2.name) {\n            return -1;\n          }\n          if (r1.name > r2.name) {\n            return 1;\n          }\n          return 0;\n        });\n        break;\n      case \"date\":\n        _repos.sort((r1, r2) => {\n          if (r1.pushed_at < r2.pushed_at) {\n            return 1;\n          }\n          if (r1.pushed_at > r2.pushed_at) {\n            return -1;\n          }\n          return 0;\n        });\n        break;\n      default:\n        break;\n    }\n    return _repos;\n  }, [repos, runnableOnly, sorting]);\n  return (\n    <div className={classes.root}>\n      <List className={classes.list} dense>\n        <ListSubheader className={classes.noPadding}>\n          <Paper className={classes.header}>\n            <FormControlLabel\n              className={classes.sorting}\n              control={\n                <ToggleButtonGroup\n                  size=\"small\"\n                  exclusive\n                  value={sorting || \"name\"}\n                  onChange={(event, newSorting) => {\n                    if (!newSorting) return;\n                    handleUpdateTaskComponent({\n                      sorting: newSorting\n                    });\n                  }}\n                >\n                  <ToggleButton value=\"name\">Nom</ToggleButton>\n                  <ToggleButton value=\"date\">Date</ToggleButton>\n                </ToggleButtonGroup>\n              }\n              label=\"Tri par\"\n              labelPlacement=\"start\"\n            />\n            <FormControlLabel\n              control={\n                <Switch\n                  checked={runnableOnly || false}\n                  onChange={(event) => {\n                    handleUpdateTaskComponent({\n                      runnableOnly: event.target.checked\n                    });\n                  }}\n                />\n              }\n              label='Executable \"RedfishOS\" '\n              labelPlacement=\"start\"\n            />\n          </Paper>\n        </ListSubheader>\n        {filteredRepos.map((repo, index) => {\n          return (\n            <React.Fragment key={index}>\n              <ListItem>\n                <Grid\n                  container\n                  direction=\"column\"\n                  justifyContent=\"center\"\n                  alignItems=\"flex-start\"\n                >\n                  <Grid item className={classes.itemText}>\n                    <ListItemText\n                      primary={repo.name}\n                      secondary={repo.description}\n                    />\n                  </Grid>\n                  <Grid item className={classes.itemFooter}>\n                    {repo.language && (\n                      <Chip\n                        className={classes.languageChip}\n                        label={repo.language}\n                        size=\"small\"\n                      />\n                    )}\n                    <Typography variant=\"caption\">\n                      {new Date(repo.pushed_at).toLocaleDateString()}\n                    </Typography>\n                  </Grid>\n                </Grid>\n                <ListItemSecondaryAction>\n                  {repo.has_pages && (\n                    <Tooltip title=\"Lancer\">\n                      <IconButton\n                        className={classes.playIconButton}\n                        onClick={() => {\n                          openTask({\n                            component: \"WebView\",\n                            componentProps: {\n                              appname: repo.name,\n                              url: `https://redfish.github.io/${repo.name}`\n                            }\n                          });\n                        }}\n                      >\n                        <FontAwesomeIcon icon=\"play-circle\" color=\"#266904\" />\n                      </IconButton>\n                    </Tooltip>\n                  )}\n                  {repo.html_url && (\n                    <Tooltip title=\"Voir sur GitHub\">\n                      <IconButton\n                        onClick={() => {\n                          window.open(repo.html_url);\n                        }}\n                      >\n                        <FontAwesomeIcon\n                          icon={[\"fab\", \"github\"]}\n                          color=\"#212121\"\n                        />\n                      </IconButton>\n                    </Tooltip>\n                  )}\n                </ListItemSecondaryAction>\n              </ListItem>\n              <Divider />\n            </React.Fragment>\n          );\n        })}\n      </List>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => ({});\n\nconst mapDispatchToProps = (dispatch) => ({\n  openTask: (payload) => dispatch(openTask(payload))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GitHubProjects);\n"],"sourceRoot":""}